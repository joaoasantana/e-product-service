// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package test

import (
	"github.com/joaoasantana/e-product-service/internal/v1/domain/core/product"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the Repository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(entity *product.Entity) (string, error) {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*product.Entity) (string, error)); ok {
		return returnFunc(entity)
	}
	if returnFunc, ok := ret.Get(0).(func(*product.Entity) string); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*product.Entity) error); ok {
		r1 = returnFunc(entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity
func (_e *MockProductRepository_Expecter) Create(entity interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(entity *product.Entity)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*product.Entity))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(s string, err error) *MockProductRepository_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(entity *product.Entity) (string, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) FindAll() ([]product.Entity, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []product.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]product.Entity, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []product.Entity); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockProductRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockProductRepository_Expecter) FindAll() *MockProductRepository_FindAll_Call {
	return &MockProductRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockProductRepository_FindAll_Call) Run(run func()) *MockProductRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductRepository_FindAll_Call) Return(entitys []product.Entity, err error) *MockProductRepository_FindAll_Call {
	_c.Call.Return(entitys, err)
	return _c
}

func (_c *MockProductRepository_FindAll_Call) RunAndReturn(run func() ([]product.Entity, error)) *MockProductRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) FindByID(s string) (*product.Entity, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *product.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*product.Entity, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *product.Entity); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockProductRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - s
func (_e *MockProductRepository_Expecter) FindByID(s interface{}) *MockProductRepository_FindByID_Call {
	return &MockProductRepository_FindByID_Call{Call: _e.mock.On("FindByID", s)}
}

func (_c *MockProductRepository_FindByID_Call) Run(run func(s string)) *MockProductRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepository_FindByID_Call) Return(entity *product.Entity, err error) *MockProductRepository_FindByID_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockProductRepository_FindByID_Call) RunAndReturn(run func(s string) (*product.Entity, error)) *MockProductRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) FindByName(s string) (*product.Entity, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *product.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*product.Entity, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *product.Entity); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type MockProductRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - s
func (_e *MockProductRepository_Expecter) FindByName(s interface{}) *MockProductRepository_FindByName_Call {
	return &MockProductRepository_FindByName_Call{Call: _e.mock.On("FindByName", s)}
}

func (_c *MockProductRepository_FindByName_Call) Run(run func(s string)) *MockProductRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepository_FindByName_Call) Return(entity *product.Entity, err error) *MockProductRepository_FindByName_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockProductRepository_FindByName_Call) RunAndReturn(run func(s string) (*product.Entity, error)) *MockProductRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}
