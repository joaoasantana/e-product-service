// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package test

import (
	"github.com/joaoasantana/e-product-service/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Create(category *entity.Category) error {
	ret := _mock.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.Category) error); ok {
		r0 = returnFunc(category)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCategoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - category
func (_e *MockCategoryRepository_Expecter) Create(category interface{}) *MockCategoryRepository_Create_Call {
	return &MockCategoryRepository_Create_Call{Call: _e.mock.On("Create", category)}
}

func (_c *MockCategoryRepository_Create_Call) Run(run func(category *entity.Category)) *MockCategoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Category))
	})
	return _c
}

func (_c *MockCategoryRepository_Create_Call) Return(err error) *MockCategoryRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Create_Call) RunAndReturn(run func(category *entity.Category) error) *MockCategoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) FindAll() ([]entity.Category, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]entity.Category, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []entity.Category); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockCategoryRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockCategoryRepository_Expecter) FindAll() *MockCategoryRepository_FindAll_Call {
	return &MockCategoryRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockCategoryRepository_FindAll_Call) Run(run func()) *MockCategoryRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCategoryRepository_FindAll_Call) Return(categorys []entity.Category, err error) *MockCategoryRepository_FindAll_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoryRepository_FindAll_Call) RunAndReturn(run func() ([]entity.Category, error)) *MockCategoryRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) FindById(s string) (*entity.Category, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entity.Category, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entity.Category); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockCategoryRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - s
func (_e *MockCategoryRepository_Expecter) FindById(s interface{}) *MockCategoryRepository_FindById_Call {
	return &MockCategoryRepository_FindById_Call{Call: _e.mock.On("FindById", s)}
}

func (_c *MockCategoryRepository_FindById_Call) Run(run func(s string)) *MockCategoryRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCategoryRepository_FindById_Call) Return(category *entity.Category, err error) *MockCategoryRepository_FindById_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoryRepository_FindById_Call) RunAndReturn(run func(s string) (*entity.Category, error)) *MockCategoryRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Validate(s string) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockCategoryRepository_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - s
func (_e *MockCategoryRepository_Expecter) Validate(s interface{}) *MockCategoryRepository_Validate_Call {
	return &MockCategoryRepository_Validate_Call{Call: _e.mock.On("Validate", s)}
}

func (_c *MockCategoryRepository_Validate_Call) Run(run func(s string)) *MockCategoryRepository_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCategoryRepository_Validate_Call) Return(err error) *MockCategoryRepository_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Validate_Call) RunAndReturn(run func(s string) error) *MockCategoryRepository_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(product *entity.Product) error {
	ret := _mock.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.Product) error); ok {
		r0 = returnFunc(product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - product
func (_e *MockProductRepository_Expecter) Create(product interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", product)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(product *entity.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Product))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(err error) *MockProductRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(product *entity.Product) error) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) FindAll() ([]entity.Product, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]entity.Product, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []entity.Product); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockProductRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockProductRepository_Expecter) FindAll() *MockProductRepository_FindAll_Call {
	return &MockProductRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockProductRepository_FindAll_Call) Run(run func()) *MockProductRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductRepository_FindAll_Call) Return(products []entity.Product, err error) *MockProductRepository_FindAll_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductRepository_FindAll_Call) RunAndReturn(run func() ([]entity.Product, error)) *MockProductRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) FindById(s string) (*entity.Product, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entity.Product, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entity.Product); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockProductRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - s
func (_e *MockProductRepository_Expecter) FindById(s interface{}) *MockProductRepository_FindById_Call {
	return &MockProductRepository_FindById_Call{Call: _e.mock.On("FindById", s)}
}

func (_c *MockProductRepository_FindById_Call) Run(run func(s string)) *MockProductRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepository_FindById_Call) Return(product *entity.Product, err error) *MockProductRepository_FindById_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepository_FindById_Call) RunAndReturn(run func(s string) (*entity.Product, error)) *MockProductRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Validate(s string) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockProductRepository_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - s
func (_e *MockProductRepository_Expecter) Validate(s interface{}) *MockProductRepository_Validate_Call {
	return &MockProductRepository_Validate_Call{Call: _e.mock.On("Validate", s)}
}

func (_c *MockProductRepository_Validate_Call) Run(run func(s string)) *MockProductRepository_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepository_Validate_Call) Return(err error) *MockProductRepository_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_Validate_Call) RunAndReturn(run func(s string) error) *MockProductRepository_Validate_Call {
	_c.Call.Return(run)
	return _c
}
